import os
import sys
import configparser
import utils
import stdiomask
import mysql.connector


def main():
	base_dir = os.path.dirname(os.path.abspath(__file__))
	
	# Load configuração
	config = configparser.ConfigParser()
	config.read(os.path.join(base_dir, 'config.ini'))
	
	sites_path = config['DEFAULT']['sites_path']
	wp_config_dir_template = config['DEFAULT']['wp_config_dir_template']
	wp_install_dir_template = config['DEFAULT']['wp_install_dir_template']
	
	# Criar diretórios necessários se eles não existirem
	directories = ['logs', 'wordpress', 'downloads', 'backups']
	for directory in directories:
		path = os.path.join(base_dir, directory)
		if not os.path.exists(path):
			os.makedirs(path)
	
	if '--update-wordpress' in sys.argv:
		import update_wordpress
		update_wordpress.update_wordpress()
		return
	
	if '-a' in sys.argv:
		sites = [d for d in os.listdir(sites_path) if os.path.isdir(os.path.join(sites_path, d))]
	else:
		sites = [d for d in os.listdir(sites_path) if os.path.isdir(os.path.join(sites_path, d))]
		print("Available sites:")
		for i, site in enumerate(sites):
			print(f"{i + 1}. {site}")
		
		choice = int(input("Enter the number of the site to process: ")) - 1
		sites = [sites[choice]]
	
	root_password = stdiomask.getpass(prompt="Enter root password for the database: ")
	
	# Teste de conexão com o banco de dados
	try:
		cnx = mysql.connector.connect(user='root', password=root_password)
		cnx.close()
		print("Successfully connected to the database.")
	except mysql.connector.Error as err:
		print(f"Error connecting to the database: {err}")
		return
	
	for site in sites:
		site_path = os.path.join(sites_path, site)
		utils.setup_logging(site)
		utils.log_action(site, "Starting maintenance.")
		
		wp_config_dir = wp_config_dir_template.replace('{{site_dir}}', site)
		wp_config_path = os.path.join(wp_config_dir, 'wp-config.php')
		wp_install_dir = wp_install_dir_template.replace('{{site_dir}}', site)
		
		try:
			wp_version = utils.get_wordpress_version(wp_install_dir)
			wp_language = utils.get_wordpress_language_from_db(wp_config_path, root_password)
			print(f"WordPress version for {site}: {wp_version}")
			print(f"WordPress language for {site}: {wp_language}")
			utils.log_action(site, f"WordPress version: {wp_version}")
			utils.log_action(site, f"WordPress language: {wp_language}")
		except FileNotFoundError:
			print(f"Could not detect the WordPress version or language for {site}.")
			wp_version = input("Enter the WordPress version to use: ")
			wp_language = utils.choose_wordpress_language()
		
		wordpress_source = f'/opt/wordpress-malware-remover/wordpress/{wp_version}/wordpress'
		if not os.path.exists(wordpress_source):
			user_choice = input(
				f"WordPress version {wp_version} not found. Do you want to download it? (y/n): ").strip().lower()
			if user_choice == 'y':
				utils.download_wordpress_version(wp_version, wp_language)
			else:
				print("Operation aborted by the user.")
				return
		
		if '--only-database' in sys.argv:
			print("Managing database.")
			import manage_database
			manage_database.manage_database(wp_config_path, root_password)
		else:
			if '--no-backup-files' not in sys.argv:
				utils.log_action(site, "Starting backup.")
				import backup
				backup.backup_site(site_path, wp_config_path, wp_install_dir)
			
			utils.log_action(site, "Fixing permissions.")
			import fix_permissions
			fix_permissions.fix_permissions(site, wp_install_dir)
			
			utils.log_action(site, "Replacing WordPress directories.")
			import replace_wordpress
			replace_wordpress.replace_wordpress_directories(wp_install_dir)
			
			utils.log_action(site, "Managing database.")
			import manage_database
			manage_database.manage_database(wp_config_path, root_password)
		
		utils.log_action(site, "Maintenance completed.")


if __name__ == "__main__":
	main()

