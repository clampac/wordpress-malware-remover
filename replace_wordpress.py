import shutil
import os
import re
import utils
import requests


def replace_wordpress_directories(site_path):
	"""Replace wp-includes and wp-admin directories with the new version."""
	wp_includes_path = os.path.join(site_path, 'wp-includes')
	wp_admin_path = os.path.join(site_path, 'wp-admin')
	
	# Remove old directories if they exist
	if os.path.exists(wp_includes_path):
		shutil.rmtree(wp_includes_path)
	if os.path.exists(wp_admin_path):
		shutil.rmtree(wp_admin_path)
	
	# Copy new WordPress files
	try:
		wordpress_version = get_wordpress_version(site_path)
	except FileNotFoundError:
		print("Could not detect the WordPress version.")
		wordpress_version = choose_wordpress_version()
	
	wordpress_source = f'/opt/wordpress-malware-remover/wordpress/{wordpress_version}/wordpress'
	
	if not os.path.exists(wordpress_source):
		user_choice = input(
			f"WordPress version {wordpress_version} not found. Do you want to download it? (y/n): ").strip().lower()
		if user_choice == 'y':
			language = choose_wordpress_language()
			download_wordpress_version(wordpress_version, language)
		else:
			print("Operation aborted by the user.")
			return
	
	copy_with_progress(os.path.join(wordpress_source, 'wp-includes'), wp_includes_path)
	copy_with_progress(os.path.join(wordpress_source, 'wp-admin'), wp_admin_path)
	
	# Set correct permissions and ownership
	set_permissions_and_ownership(site_path)
	
	utils.log_action(site_path, "WordPress directories replaced.")


def get_wordpress_version(site_path):
	"""Extract the WordPress version from the site."""
	version_file_path = os.path.join(site_path, 'wp-includes', 'version.php')
	if not os.path.exists(version_file_path):
		raise FileNotFoundError(f"No such file or directory: '{version_file_path}'")
	with open(version_file_path, 'r') as file:
		content = file.read()
		version = re.search(r"\$wp_version = '(.+?)';", content).group(1)
	return version


def choose_wordpress_version():
	"""Prompt the user to choose a WordPress version from the latest 5 available."""
	response = requests.get("https://api.wordpress.org/core/version-check/1.7/")
	versions = response.json()['offers']
	latest_versions = [v['version'] for v in versions[:5]]
	
	print("Available WordPress versions:")
	for i, version in enumerate(latest_versions, start=1):
		print(f"{i}. {version}")
	
	choice = int(input("Enter the number of the WordPress version to use: ")) - 1
	return latest_versions[choice]


def choose_wordpress_language():
	"""Prompt the user to choose a language for the WordPress version."""
	languages = {
		'1': 'en_US',
		'2': 'es_ES',
		'3': 'de_DE',
		'4': 'fr_FR',
		'5': 'it_IT',
		'6': 'ja',
		'7': 'pt_BR'
	}
	
	print("Available languages:")
	print("1. English (United States)")
	print("2. Spanish (Spain)")
	print("3. German")
	print("4. French")
	print("5. Italian")
	print("6. Japanese")
	print("7. Portuguese (Brazil)")
	
	choice = input("Enter the number of the language to use: ").strip()
	return languages[choice]


def download_wordpress_version(version, language):
	"""Download the specified WordPress version in the specified language."""
	download_url = f"https://{language}.wordpress.org/wordpress-{version}-{language}.tar.gz"
	download_path = f'/opt/wordpress-malware-remover/downloads/wordpress-{version}-{language}.tar.gz'
	response = requests.get(download_url, stream=True)
	
	with open(download_path, 'wb') as file:
		for chunk in response.iter_content(chunk_size=8192):
			file.write(chunk)
	
	extract_path = f'/opt/wordpress-malware-remover/wordpress/{version}'
	shutil.unpack_archive(download_path, extract_path)


def copy_with_progress(src, dst):
	"""Copy directory with progress bar."""
	total_items = sum([len(dirs) + len(files) for _, dirs, files in os.walk(src)])
	processed_items = [0]  # Using list to mutate within nested function
	
	def copy_function(src, dst):
		shutil.copy2(src, dst)
		processed_items[0] += 1
		utils.progress_bar(total_items, processed_items[0])
	
	shutil.copytree(src, dst, copy_function=copy_function)


def set_permissions_and_ownership(site_path):
	"""Set correct permissions and ownership for the WordPress installation."""
	uid, gid = get_uid_gid('www-data', 'www-data')
	
	for root, dirs, files in os.walk(site_path):
		for name in dirs:
			dir_path = os.path.join(root, name)
			os.chmod(dir_path, 0o755)
			os.chown(dir_path, uid, gid)
		for name in files:
			file_path = os.path.join(root, name)
			os.chmod(file_path, 0o644)
			os.chown(file_path, uid, gid)


def get_uid_gid(user, group):
	"""Get UID and GID for the specified user and group."""
	import pwd, grp
	uid = pwd.getpwnam(user).pw_uid
	gid = grp.getgrnam(group).gr_gid
	return uid, gid


if __name__ == "__main__":
	import sys
	
	site_path = sys.argv[1]
	utils.setup_logging(site_path)
	replace_wordpress_directories(site_path)
