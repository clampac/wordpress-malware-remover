import mysql.connector
import utils
import re


def get_db_user_from_wp_config(wp_config_path):
	"""Extract the DB user from wp-config.php."""
	with open(wp_config_path, 'r') as file:
		content = file.read()
		user = re.search(r"define\('DB_USER', '(.+?)'\);", content).group(1)
		password = re.search(r"define\('DB_PASSWORD', '(.+?)'\);", content).group(1)
	return user, password


def update_wp_config(wp_config_path, new_user, new_password):
	"""Update wp-config.php with the new DB user and password."""
	with open(wp_config_path, 'r') as file:
		content = file.read()
	content = re.sub(r"define\('DB_USER', '(.+?)'\);", f"define('DB_USER', '{new_user}');", content)
	content = re.sub(r"define\('DB_PASSWORD', '(.+?)'\);", f"define('DB_PASSWORD', '{new_password}');", content)
	with open(wp_config_path, 'w') as file:
		file.write(content)


def manage_database(site_path, root_password):
	"""Manage database users and update wp-config.php."""
	wp_config_path = os.path.join(site_path, 'wp-config.php')
	db_user, db_password = get_db_user_from_wp_config(wp_config_path)
	new_password = utils.generate_secure_password()
	
	# Connect to MySQL as root
	connection = mysql.connector.connect(user='root', password=root_password)
	cursor = connection.cursor()
	
	# Remove the old user
	cursor.execute(f"DROP USER IF EXISTS '{db_user}'@'localhost';")
	
	# Create a new user
	cursor.execute(f"CREATE USER '{db_user}'@'localhost' IDENTIFIED BY '{new_password}';")
	cursor.execute(f"GRANT ALL PRIVILEGES ON {db_user}.* TO '{db_user}'@'localhost';")
	connection.commit()
	
	# Update wp-config.php
	update_wp_config(wp_config_path, db_user, new_password)
	utils.log_action(site_path, f"DB user updated from {db_user} to {db_user} with new password.")


if __name__ == "__main__":
	import sys
	
	site_path = sys.argv[1]
	root_password = utils.get_root_password()
	utils.setup_logging(site_path)
	manage_database(site_path, root_password)
