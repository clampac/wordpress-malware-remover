import os
import re
import shutil
import requests
import logging
import mysql.connector
import sys

def setup_logging(site_name):
    """Setup logging for a given site."""
    log_file = f"/opt/wordpress-malware-remover/logs/{site_name}.log"
    logging.basicConfig(filename=log_file, level=logging.INFO,
                        format='%(asctime)s %(message)s')
    logging.info("\n\n" + "-" * 80 + "\n\n")

def log_action(site_name, message):
    """Log an action for a given site."""
    logging.info(message)

def get_wordpress_version(wp_install_path):
    """Extract the WordPress version from the site."""
    version_file_path = os.path.join(wp_install_path, 'wp-includes', 'version.php')
    if not os.path.exists(version_file_path):
        raise FileNotFoundError(f"No such file or directory: '{version_file_path}'")
    with open(version_file_path, 'r') as file:
        content = file.read()
        version = re.search(r"\$wp_version = '(.+?)';", content).group(1)
    return version

def get_wordpress_language_from_db(wp_config_path, root_password):
    """Extract the WordPress language from the database."""
    db_user, db_password, db_name = get_db_credentials(wp_config_path)
    try:
        cnx = mysql.connector.connect(user='root', password=root_password, database=db_name)
        cursor = cnx.cursor()
        cursor.execute("SELECT option_value FROM wp_options WHERE option_name = 'WPLANG'")
        result = cursor.fetchone()
        cnx.close()
        if result:
            return result[0]
        else:
            return 'en_US'
    except mysql.connector.Error as err:
        log_action(db_name, f"Error fetching WordPress language from database: {err}")
        raise

def get_db_credentials(wp_config_path):
    """Extract DB_USER, DB_PASSWORD, and DB_NAME from wp-config.php."""
    db_user = None
    db_password = None
    db_name = None
    with open(wp_config_path, 'r') as file:
        for line in file:
            if line.strip().startswith('//'):
                continue  # Ignore commented lines
            if "DB_USER" in line:
                db_user = re.search(r"define\(\s*'DB_USER'\s*,\s*'(.+?)'\s*\);", line).group(1)
            if "DB_PASSWORD" in line:
                db_password = re.search(r"define\(\s*'DB_PASSWORD'\s*,\s*'(.+?)'\s*\);", line).group(1)
            if "DB_NAME" in line:
                db_name = re.search(r"define\(\s*'DB_NAME'\s*,\s*'(.+?)'\s*\);", line).group(1)
    return db_user, db_password, db_name

def choose_wordpress_language():
    """Prompt the user to choose a language for the WordPress version."""
    languages = {
        '1': 'en_US',
        '2': 'es_ES',
        '3': 'de_DE',
        '4': 'fr_FR',
        '5': 'it_IT',
        '6': 'ja',
        '7': 'pt_BR'
    }

    print("Available languages:")
    print("1. English (United States)")
    print("2. Spanish (Spain)")
    print("3. German")
    print("4. French")
    print("5. Italian")
    print("6. Japanese")
    print("7. Portuguese (Brazil)")

    choice = input("Enter the number of the language to use: ").strip()
    return languages[choice]

def download_wordpress_version(version, language, download_path):
    """Download the specified WordPress version in the specified language."""
    download_url = f"https://{language}.wordpress.org/wordpress-{version}-{language}.tar.gz"
    response = requests.get(download_url, stream=True)

    with open(download_path, 'wb') as file:
        for chunk in response.iter_content(chunk_size=8192):
            file.write(chunk)

    extract_path = os.path.dirname(download_path)
    shutil.unpack_archive(download_path, extract_path)

def get_latest_wordpress_versions(count=5):
    """Get the latest WordPress versions."""
    response = requests.get("https://api.wordpress.org/core/version-check/1.7/")
    versions = response.json()['offers']
    return [v['version'] for v in versions[:count]]

def progress_bar(total, progress):
    """Display a progress bar."""
    bar_length = 50
    block = int(round(bar_length * progress / total))
    text = f"\r[{'#' * block + '-' * (bar_length - block)}] {progress}/{total}"
    sys.stdout.write(text)
    sys.stdout.flush()
