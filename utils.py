import os
import re
import secrets
import logging
import requests
import subprocess
import sys

def generate_secure_password(length=16):
    """Generate a secure password using the secrets library."""
    return secrets.token_urlsafe(length)

def setup_logging(site_name):
    """Setup logging for a given site."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    log_dir = os.path.join(base_dir, f"logs/{site_name}")
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    log_file = os.path.join(log_dir, f"{site_name}.log")
    logging.basicConfig(filename=log_file, level=logging.INFO,
                        format='%(asctime)s %(message)s')
    logging.info("\n\n" + "-"*80 + "\n\n")

def log_action(site_name, message):
    """Log an action for a given site."""
    logging.info(message)
    print(message)

def run_command(command):
    """Run a system command and log the output."""
    result = os.system(command)
    logging.info(f"Command: {command}\nResult: {result}")

def get_root_password():
    """Prompt the user for the root password of the database."""
    import getpass
    return getpass.getpass("Enter root password for the database: ")

def get_db_user_from_wp_config(wp_config_path):
    """Extract the DB_USER and DB_PASSWORD from the wp-config.php file."""
    db_user = None
    db_password = None
    with open(wp_config_path, 'r') as file:
        for line in file:
            if "DB_USER" in line:
                db_user_match = re.search(r"define\(\s*'DB_USER'\s*,\s*'(.+?)'\s*\);", line)
                if db_user_match:
                    db_user = db_user_match.group(1)
            if "DB_PASSWORD" in line:
                db_password_match = re.search(r"define\(\s*'DB_PASSWORD'\s*,\s*'(.+?)'\s*\);", line)
                if db_password_match:
                    db_password = db_password_match.group(1)
    if not db_user or not db_password:
        raise ValueError("Could not find DB_USER or DB_PASSWORD in wp-config.php")
    return db_user, db_password

def get_latest_wordpress_versions(count=5):
    """Get the latest WordPress versions."""
    response = requests.get("https://api.wordpress.org/core/version-check/1.7/")
    versions = response.json()['offers']
    return [v['version'] for v in versions[:count]]

def download_wordpress_version(version, language, download_path):
    """Download the specified WordPress version in the specified language."""
    url = f"https://{language}.wordpress.org/wordpress-{version}-{language}.tar.gz"
    response = requests.get(url)
    with open(download_path, 'wb') as file:
        file.write(response.content)

def get_installed_plugins(wp_install_path):
    """Get the list of installed plugins and their status."""
    active_plugins = subprocess.check_output(['wp', 'plugin', 'list', '--status=active', '--path=' + wp_install_path], universal_newlines=True)
    inactive_plugins = subprocess.check_output(['wp', 'plugin', 'list', '--status=inactive', '--path=' + wp_install_path], universal_newlines=True)
    return f"Active Plugins:\n{active_plugins}\n\nInactive Plugins:\n{inactive_plugins}\n"

def get_installed_themes(wp_install_path):
    """Get the list of installed themes and their status."""
    active_theme = subprocess.check_output(['wp', 'theme', 'list', '--status=active', '--path=' + wp_install_path], universal_newlines=True)
    inactive_themes = subprocess.check_output(['wp', 'theme', 'list', '--status=inactive', '--path=' + wp_install_path], universal_newlines=True)
    return f"Active Theme:\n{active_theme}\n\nInactive Themes:\n{inactive_themes}\n"

def progress_bar(total, current):
    """Display a progress bar."""
    bar_length = 50
    progress = int(bar_length * current / total)
    bar = '[' + '#' * progress + '.' * (bar_length - progress) + ']'
    sys.stdout.write(f"\r{bar} {current}/{total}")
    sys.stdout.flush()
